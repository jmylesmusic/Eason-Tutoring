export default Parallax;
/**
 * Parallax direction (x or y).
 */
export type Direction = "x" | "y";
export type Options = {
    /**
     * Parallax relative speed.
     */
    speed?: number;
    /**
     * Offset (0 to 1) relative to window height.
     */
    offset?: number;
    /**
     * Offset (0 to 1) relative to element height.
     */
    heightOffset?: number;
    /**
     * Parallax direction.
     */
    direction?: Direction;
    /**
     * Minimum translation.
     */
    min?: number;
    /**
     * Maximum translation.
     */
    max?: number;
    /**
     * Apply parallax to background position instead of transform.
     */
    background?: boolean;
};
/**
 * @typedef {"x" | "y"} Direction Parallax direction (x or y).
 */
/**
 * @typedef {Object} Options
 * @property {number} [speed=1] Parallax relative speed.
 * @property {number} [offset=0.5] Offset (0 to 1) relative to window height.
 * @property {number} [heightOffset=0] Offset (0 to 1) relative to element height.
 * @property {Direction} [direction="y"] Parallax direction.
 * @property {number} [min=-Infinity] Minimum translation.
 * @property {number} [max=Infinity] Maximum translation.
 * @property {boolean} [background=false] Apply parallax to background position instead of transform.
 */
/**
 * Simple Parallax on DOM elements.
 *
 * @alias module:Parallax
 */
declare class Parallax {
    /**
     * Creates an instance of Parallax.
     * @param {HTMLElement[]} elements Elements to be transformed.
     * @param {Options} options
     */
    constructor(elements: HTMLElement[], options: Options);
    layers: HTMLElement[];
    options: any;
    init(): void;
    reset(): void;
    viewportHeight: number;
    items: any[];
    cacheLayerProperties(element: any): {
        element: any;
        top: number;
        height: any;
        speed: any;
        offset: any;
        heightOffset: any;
        direction: any;
        min: any;
        max: any;
        background: any;
    };
    getElementHeight(element: any): any;
    getElementTop(element: any): any;
    getElementTranslateY(element: any): number;
    getScrollTop(): number;
    transform(): void;
    onScroll(): void;
    onResize(): void;
}
